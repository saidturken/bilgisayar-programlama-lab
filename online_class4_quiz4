#video 1

def min_heapify(array, i):   #fonksiyon min heap yapısını düzenliyor.
    left = 2 * i + 1
    right = 2 * i + 2
    length = len(array) - 1
    smallest =i
    if left <= length and array[i] > array[left]:
        smallest = left
    if right <= length and array[smallest] > array[right]:
        smallest=right
    if smallest != i:
        array[i] , array[smallest] = array[smallest] , array[i]
        min_heapify(array, smallest)    
        
        
def build_min_heapify(array):   # fonksiyon min heap yapısını oluşturuyor.
    for i in reversed(range(len(array)//2)):
        min_heapify(array, i )
        
#video 2

def heapsort(array):   #heap sort yapısını oluşturuyoruz.
    array=array.copy() #array i değiştirmek istemediğimiz için kopyalayıp kullandık.
    build_min_heapify(array)
    sorted_array=[]
    for _ in range (len(array)):
        array[0] , array[-1] = array[-1] , array[0]
        sorted_array.append(array.pop())
        min_heapify(array, 0)
    return sorted_array          

my_array_1 = [8,3,6,2,6,8,1,61]
my_array_2 = heapsort(my_array_1)

#ödev insert

def insertHeap(my_heap, new):
    for i in range(len(my_heap)):
        if my_heap[i] == new:
            print("Bu sayı zaten heapde mevcut, listeye yeni eleman eklenemedi")
            return my_heap
    my_heap.append(new)
    build_min_heapify(my_heap)
    return my_heap
    
#ödev remove 
#köküyle en son elemanının yerini değiştirir ve en küçük elemanı silerek heap dizisini yeniden oluşturur.
def removeHeap(my_heap):
    new_array = heapsort(my_heap)
    new_array[0], new_array[-1] = new_array[-1], new_array[0]
    new_array.pop()
    build_min_heapify(new_array)
    return new_array
